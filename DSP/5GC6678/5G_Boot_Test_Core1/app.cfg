var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var EventCombiner = xdc.useModule("ti.sysbios.family.c64p.EventCombiner");
var CpIntc = xdc.useModule("ti.sysbios.family.c66.tci66xx.CpIntc");

//IPC
var Ipc = xdc.useModule('ti.sdo.ipc.Ipc');
var Notify = xdc.useModule('ti.sdo.ipc.Notify');
var MessageQ = xdc.useModule('ti.sdo.ipc.MessageQ');
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');


var System = xdc.useModule('xdc.runtime.System');
var SysStd  = xdc.useModule('xdc.runtime.SysStd');
var SysCallback = xdc.useModule('xdc.runtime.SysCallback');

System.SupportProxy = SysStd;
System.extendedFormats = "%f";

//System.SupportProxy = SysCallback;
//SysCallback.abortFxn = "&myUserAbort";
//SysCallback.exitFxn  = "&myUserExit";
//SysCallback.flushFxn = "&myUserFlush";
//SysCallback.putchFxn = "&UARTUtils_systemPutch";
//SysCallback.readyFxn = "&UARTUtils_systemReady";

Ipc.procSync = Ipc.ProcSync_PAIR;//Ipc.ProcSync_ALL;//
//Ipc.setEntryMeta({setupNotify: true, setupMessageQ: true);  default

MultiProc.numProcessors = 1;
MultiProc.setConfig("CORE0", ["CORE0"]);// "CORE2", "CORE3",
                             //"CORE4", "CORE5", "CORE6", "CORE7"]);
 
SharedRegion.translate = true;                            
                          
var SR0Mem = Program.cpu.memoryMap["MSMCSRAM"];
                             
SharedRegion.setEntryMeta(0,
     { base: SR0Mem.base,
       len: 0x00200000,
       ownerProcId: 0,
       isValid: true,
       cacheLineSize: 128,
       name: "SR_0",
       cacheEnable:true
     });
                             

//CPPI
var Cppi = xdc.loadPackage('ti.drv.cppi');

//QMSS
var Qmss = xdc.loadPackage('ti.drv.qmss');

//SRIO
var Srio = xdc.loadPackage('ti.drv.srio');

//RM
var  Rm = xdc.loadPackage('ti.drv.rm');

/* Load the Board package and set the board name */
var Board = xdc.loadPackage('ti.board');
Board.Settings.boardName = "cyhc5GC6678";

var exception			                =	xdc.useModule('ti.sysbios.family.c64p.Exception');

/* Load Profiling package */
var Utils = xdc.loadPackage('ti.utils.profiling');

//UART
var Uart = xdc.loadPackage('ti.drv.uart');
Uart.Settings.enableProfiling = false;
Uart.Settings.socType = "c6678";


var Osal = xdc.useModule('ti.osal.Settings');
Osal.osType = "tirtos";
Osal.socType = "c6678";

//CSL
var cslSettings = xdc.useModule ('ti.csl.Settings');
cslSettings.useCSLIntcLib = true;
cslSettings.deviceType = "c6678";
cslSettings.libProfile = "release";


/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0xC800;    //4KB


/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x4000;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

Program.sectMap[".qmss"] = "MSMCSRAM";
Program.sectMap[".cppi"] = "MSMCSRAM";
Program.sectMap[".L2RAM"] = "L2SRAM";
Program.sectMap[".srioSharedMem"] = "MSMCSRAM";
Program.sectMap["platform_lib"]  = "L2SRAM";

for (var mem in Program.cpu.memoryMap) {
   print(mem);
   print(Program.cpu.memoryMap[mem].base);
   print(Program.cpu.memoryMap[mem].len);
}


Task.defaultStackSize = 2048*8;
